   1  proc fibonacci(int valor_limite){
          [0001, 0000] (0016,            Procedure) {proc}
          [0001, 0005] (0044,                   Id) {fibonacci}
          [0001, 0014] (0010,                AbPar) {(}
          [0001, 0015] (0002,              Integer) {int}
          [0001, 0019] (0044,                   Id) {valor_limite}
          [0001, 0031] (0011,                FePar) {)}
          [0001, 0032] (0014,               AbChav) {{}
   2      int a, b, aux;
          [0002, 0004] (0002,              Integer) {int}
          [0002, 0008] (0044,                   Id) {a}
          [0002, 0009] (0009,                   Vg) {,}
          [0002, 0011] (0044,                   Id) {b}
          [0002, 0012] (0009,                   Vg) {,}
          [0002, 0014] (0044,                   Id) {aux}
          [0002, 0017] (0007,                 PtVg) {;}
   3  
   4      if(valor_limite >= 0){
          [0004, 0004] (0025,                   If) {if}
          [0004, 0006] (0010,                AbPar) {(}
          [0004, 0007] (0044,                   Id) {valor_limite}
          [0004, 0020] (0031,            OpMaiorEq) {>=}
          [0004, 0023] (0046,               CteInt) {0}
          [0004, 0024] (0011,                FePar) {)}
          [0004, 0025] (0014,               AbChav) {{}
   5  
   6          print "0";
          [0006, 0008] (0020,                Print) {print}
          [0006, 0014] (0050,               CteStr) {"0"}
          [0006, 0017] (0007,                 PtVg) {;}
   7  
   8          a = 0;
          [0008, 0008] (0044,                   Id) {a}
          [0008, 0010] (0042,                OpAtr) {=}
          [0008, 0012] (0046,               CteInt) {0}
          [0008, 0013] (0007,                 PtVg) {;}
   9          b = 1;
          [0009, 0008] (0044,                   Id) {b}
          [0009, 0010] (0042,                OpAtr) {=}
          [0009, 0012] (0046,               CteInt) {1}
          [0009, 0013] (0007,                 PtVg) {;}
  10          aux = a + b;
          [0010, 0008] (0044,                   Id) {aux}
          [0010, 0012] (0042,                OpAtr) {=}
          [0010, 0014] (0044,                   Id) {a}
          [0010, 0016] (0037,               OpMais) {+}
          [0010, 0018] (0044,                   Id) {b}
          [0010, 0019] (0007,                 PtVg) {;}
  11  
  12          while(aux <= limite){
          [0012, 0008] (0024,                While) {while}
          [0012, 0013] (0010,                AbPar) {(}
          [0012, 0014] (0044,                   Id) {aux}
          [0012, 0018] (0032,            OpMenorEq) {<=}
          [0012, 0021] (0044,                   Id) {limite}
          [0012, 0027] (0011,                FePar) {)}
          [0012, 0028] (0014,               AbChav) {{}
  13              print ", %d", aux;
          [0013, 0012] (0020,                Print) {print}
          [0013, 0018] (0050,               CteStr) {", %d"}
          [0013, 0024] (0009,                   Vg) {,}
          [0013, 0026] (0044,                   Id) {aux}
          [0013, 0029] (0007,                 PtVg) {;}
  14              aux = a + b;
          [0014, 0012] (0044,                   Id) {aux}
          [0014, 0016] (0042,                OpAtr) {=}
          [0014, 0018] (0044,                   Id) {a}
          [0014, 0020] (0037,               OpMais) {+}
          [0014, 0022] (0044,                   Id) {b}
          [0014, 0023] (0007,                 PtVg) {;}
  15              a = b;
          [0015, 0012] (0044,                   Id) {a}
          [0015, 0014] (0042,                OpAtr) {=}
          [0015, 0016] (0044,                   Id) {b}
          [0015, 0017] (0007,                 PtVg) {;}
  16              b = aux;
          [0016, 0012] (0044,                   Id) {b}
          [0016, 0014] (0042,                OpAtr) {=}
          [0016, 0016] (0044,                   Id) {aux}
          [0016, 0019] (0007,                 PtVg) {;}
  17          }
          [0017, 0008] (0015,               FeChav) {}}
  18      }
          [0018, 0004] (0015,               FeChav) {}}
  19  }
          [0019, 0000] (0015,               FeChav) {}}
  20  
  21  int init(){
          [0021, 0000] (0002,              Integer) {int}
          [0021, 0004] (0001,                 Init) {init}
          [0021, 0008] (0010,                AbPar) {(}
          [0021, 0009] (0011,                FePar) {)}
          [0021, 0010] (0014,               AbChav) {{}
  22      int limite;
          [0022, 0004] (0002,              Integer) {int}
          [0022, 0008] (0044,                   Id) {limite}
          [0022, 0014] (0007,                 PtVg) {;}
  23  
  24      print "Digite um valor limite: ";
          [0024, 0004] (0020,                Print) {print}
          [0024, 0010] (0050,               CteStr) {"Digite um valor limite: "}
          [0024, 0036] (0007,                 PtVg) {;}
  25      input limite;
          [0025, 0004] (0019,                Input) {input}
          [0025, 0010] (0044,                   Id) {limite}
          [0025, 0016] (0007,                 PtVg) {;}
  26  
  27      fibonacci(limite);
          [0027, 0004] (0044,                   Id) {fibonacci}
          [0027, 0013] (0010,                AbPar) {(}
          [0027, 0014] (0044,                   Id) {limite}
          [0027, 0020] (0011,                FePar) {)}
          [0027, 0021] (0007,                 PtVg) {;}
  28  
  29      return 0;
          [0029, 0004] (0017,               Return) {return}
          [0029, 0011] (0046,               CteInt) {0}
          [0029, 0012] (0007,                 PtVg) {;}
  30  }
          [0030, 0000] (0015,               FeChav) {}}
  31  
          [0031, 0000] (0051,                  Eof) {}
